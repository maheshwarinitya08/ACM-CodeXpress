/* Day 21: Spiral Exploration of the Cosmic Matrix
Suppose you have a cosmic matrix of size m x n, where each element represents a different celestial object or phenomenon. How would you traverse the matrix in a spiral order, starting from the top-left corner and moving clockwise, to observe all the wonders of the universe?

You can imagine the cosmic matrix as a rectangular patch of the night sky, where each cell contains a star, a planet, a galaxy, or any other cosmic entity.
To traverse the matrix in a spiral order, you would need to follow a pattern of moving right, down, left, and up, while reducing the number of steps in each direction by one after every two turns.
Input Format

The first line will give T, the number of testcases.
The first line of each testcase will give m and n.
The next lines will provide the cosmic matrix.
Constraints

1<=T<=1000
1<=m,n<=10
-100000<=matrix[i][j]<=100000
Output Format

for each testcase output the spiral traversal of matrix.

Sample Input 0

1
3 3
1 2 3
4 5 6
7 8 9
Sample Output 0

1 2 3 6 9 8 7 4 5 */


#include <stdio.h>

int main() {
    int T;
    scanf("%d", &T);

    while (T--) {
        int m, n;
        scanf("%d %d", &m, &n);

        int matrix[10][10];
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++)
                scanf("%d", &matrix[i][j]);

        int top = 0, bottom = m - 1, left = 0, right = n - 1;

        while (top <= bottom && left <= right) {
            // Move right
            for (int i = left; i <= right; i++)
                printf("%d ", matrix[top][i]);
            top++;

            // Move down
            for (int i = top; i <= bottom; i++)
                printf("%d ", matrix[i][right]);
            right--;

            // Move left
            if (top <= bottom) {
                for (int i = right; i >= left; i--)
                    printf("%d ", matrix[bottom][i]);
                bottom--;
            }

            // Move up
            if (left <= right) {
                for (int i = bottom; i >= top; i--)
                    printf("%d ", matrix[i][left]);
                left++;
            }
        }

        printf("\n");
    }

    return 0;
}


